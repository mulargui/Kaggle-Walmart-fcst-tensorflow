Here are notes of ideas explored during the project
1. DataPreparation. 
	It puts together all the features we have and also dummifies and normalizes fields. 
	Tranformed date to year and weekofyear to reflect seasonality.
	Pending: work with NaNs in features
2. ExploreDates. 
	From week of the year and year I cannot reproduce the date. This piece of code works fine for 2010,11 and 12 but not for 2013
	dfresult['NewDate'] = pd.to_datetime(dfresult.Seasonality.astype(str)+
		dfresult.Year.astype(str).add('-5') ,format='%W%Y-%w')
	The reason of the failure is that 2012 has 53 weeks under ISO rules. 
	Interesting to_datetime says is week 1 for 1/4/2013 (it should say 53) but when I try to reverse in the code above it correctly says week 1 is 1/11/2013
	After quite time spent, I'm generating a dates.csv files to keep date, week, year to regenerate dates in the final result
	Update: I was able to regenerate the final result without the help of this file - deleting dates.csv
3. Sales Adjustments in DataPreparation
	Sales in holidays are weighted 5 times other weeks - worth to have them right.
	Super Bowl, Labor Day and Thanksgiving always happen in the same day of the week so sales are accurately represented in weeks 6. 36 and 47.
	That's not the case for Christmas, which is on Dec 25th. Luckily always hapens in week 52, that's good. 
	Below is a detail of Dec per year with the weeks ending on Friday, as is the date format used in the competition.
Dec 2010
	#	S	S	M	T	W	X	F
	48					1	2	3
	49	4	5	6	7	8	9	10
	50	11	12	13	14	15	16	17
	51	18	19	20	21	22	23	24
	52	25	26	27	28	29	30	31	*IsHoliday
Dec 2011
	#	S	S	M	T	W	X	F
	48						1	2
	49	3	4	5	6	7	8	9
	50	10	11	12	13	14	15	16
	51	17	18	19	20	21	22	23
	52	24	25	26	27	28	29	30	*IsHoliday
	1	31
Dec 2012
	#	S	S	M	T	W	X	F
	49	1	2	3	4	5	6	7
	50	8	9	10	11	12	13	14
	51	15	16	17	18	19	20	21
	52	22	23	24	25	26	27	28	*IsHoliday
	1	29	30	31
	
	As you can see week 52 has no day of sales (nobody buys on the 25th) on 2010, 1 day on 2011 and 3 days o 2012.
	We are going to make some sales adjustments so we can compare apples with apples and the sales data is aligned over years on the same week.
	
	Weekly sales increments vs prev week
	2010. week 49 +11.5%
	2010. week 50 +11%
	2010. week 51 +30.9% (hottest week)
	2010. week 52 -60% (returns)
	
	2011. week 49 +12.4%
	2011. week 50 +8%
	2011. week 51 +28.1% (hottest week)
	2011. week 52 -40% (returns)
	
	Assumptions:
	3 weeks of sales for christmas: Dec 4th - Dec 24th
	Week 52 always has 3 days of sales (as in 2012) - hot sales days
	
	Adjustments:
	2012 - Do nothing! (this is under the test set)
	2010 dailysales = sales on 49 + 50 + 51 /21
		week 52 += 3 * dailysales
		week 49 -= 3 * dailysales
	2011 - this is tricky!
		dailysales = sales on 49 + 50 + 51 +52 /21
		week 52 += 2 * dailysales
		week 49 -= 2 * dailysales
4. Looks like Keras works better and faster with float32 instead of float64
	https://www.quora.com/When-should-I-use-tf-float32-vs-tf-float64-in-TensorFlow
5. Removed 7 features with NaNs to have a working model and experiment with NN models, epochs,...
	We'll go back to NaNs later.
6. First submission sets me in the 612 position
	x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=0.2)
	model.add(Dense(units=7, activation='relu', input_dim=12))
	model.add(Dense(units=1, activation='linear'))
	model.compile(loss='mean_squared_error', optimizer='Adam', metrics=['accuracy'])
	model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=25)
7. Increasing the number of epochs to 250 gives a marginal improvement to 606 position
8. Replacing NaN by 0 in the features doesnt help. Position 615.
	
	
	
	
